$PBExportHeader$f_calculo_unidades_cuadradas.srf
$PBExportComments$Calculo de unidadades,pallets y cajas según metros lineales recibe(articulo,pallets,cantidad) y devuelve pallets,cajas y cantidad segun tipo de unidad.
global type f_calculo_unidades_cuadradas from function_object
end type

forward prototypes
global function string f_calculo_unidades_cuadradas (string cod_empresa, string cod_articulo, string cod_pallet, string caja, decimal total_lineales)
end prototypes

global function string f_calculo_unidades_cuadradas (string cod_empresa, string cod_articulo, string cod_pallet, string caja, decimal total_lineales); String cod_formato,cod_modelo,cod_unidad
 Integer longitud
 Integer bien,total_cajas,total_pallets,cajas,n_piezascaja,n_cajaspallet
 decimal{3}  n_metroslcaja,total_cantidad
 decimal n_metroscaja
 decimal{5} largo, ancho, metros2
 string cadena

 bien=0
 SELECT articulos.empresa,articulos.codigo,articulos.formato,articulos.unidad ,
        almartcajas.piezascaja,almartcajas.metroscaja,almartcajas.metroslcaja
 INTO   :cod_empresa,:cod_articulo,:cod_formato,:cod_unidad,
        :n_piezascaja,:n_metroscaja,:n_metroslcaja
 FROM articulos,almartcajas  
 WHERE (articulos.empresa = :cod_empresa )
 AND   (articulos.codigo  = :cod_articulo )  
 AND   (almartcajas.empresa = articulos.empresa)
 AND   (almartcajas.articulo = articulos.codigo)
 AND   (almartcajas.caja =:caja)
 ORDER BY articulos.empresa ASC,articulos.codigo ASC  USING SQLCA ;
IF SQLCA.SQLCode<>0 THEN bien=1

IF bien=0 THEN
    SELECT    palarticulo.cajaspallet INTO :n_cajaspallet FROM palarticulo
     WHERE    palarticulo.empresa  = :cod_empresa 
     AND      palarticulo.articulo = :cod_articulo
     AND      palarticulo.codigo   = :cod_pallet
	  AND      palarticulo.caja     = :caja;
     IF SQLCA.SQLCode<>0 THEN bien=1  
END IF


//Solo nos interesan los 2 primeros decimales (para coincidir con catalogos
if isnull(n_metroscaja) or n_metroscaja <= 0 then 
	n_metroscaja = 0
	total_cantidad = 0
	total_cajas = 0
	total_lineales = 0
	total_pallets = 0
	cajas = 0
else
	//n_metroscaja = round(n_metroscaja, 2)
	
	// total_cajas = ceiling(total_lineales / n_metroscaja)
	
	if mod (total_lineales, n_metroscaja)	= 0 then
		total_cajas = total_lineales / n_metroscaja
	else
		total_cajas = truncate((total_lineales / n_metroscaja),0) + 1
	end if
	
	total_cantidad = n_piezascaja * total_cajas
	IF n_cajaspallet = 0 THEN
		total_pallets = 0
	ELSE
		total_pallets = truncate(total_cajas / n_cajaspallet, 0)
	END IF
	cajas = total_cajas - (total_pallets * n_cajaspallet)
//	if n_cajaspallet > 0 then
//		if mod(total_cajas, n_cajaspallet) > 0 then
//				total_pallets ++
//		end if
//	else
//		total_pallets = 0
//	end if
end if



/*
//CALCULO POR PIEZAS - NO INTERESA (POR NO COINCIDIR CON CATALOGO QUE DEFINE M2 CAJA)
ancho = f_nombre_formato_parte1(codigo_empresa,cod_formato) / 100 //DE cm a m
largo = f_nombre_formato_parte2(codigo_empresa,cod_formato) / 100 //DE cm a m
metros2 = ancho * largo
//metros2 = dec(string(ancho * largo, "###.###,00"))


IF n_piezascaja=0 THEN 
	total_cajas = 0
ELSE
	if mod(total_cantidad, n_piezascaja) = 0 then
		total_cajas = total_cantidad / n_piezascaja
	else
		total_cajas = (total_cantidad / n_piezascaja) + 1
		total_cantidad = n_piezascaja * total_cajas
	end if
END IF

IF n_cajaspallet = 0 THEN
	total_pallets = 0
ELSE
	total_pallets = truncate(total_cajas / n_cajaspallet, 0)
END IF
cajas = total_cajas - (total_pallets * n_cajaspallet)
*/

if caja = "901" then //SIN CAJA
	cajas = 0
	total_cajas = 0
end if

cadena = &
Trim(String(total_pallets))+Space(6 - len(Trim(String(total_pallets))))+&
Trim(String(cajas))+Space(6 - len(trim(String(cajas))))+&
Trim(String(total_cajas))+Space(6 - len(trim(string(total_cajas))))+&
Trim(String(total_cantidad))+Space(9 - len(trim(string(total_cantidad))))+&
Trim(String(total_lineales))
         
RETURN cadena

end function

