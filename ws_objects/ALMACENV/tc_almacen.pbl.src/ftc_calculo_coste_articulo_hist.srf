$PBExportHeader$ftc_calculo_coste_articulo_hist.srf
global type ftc_calculo_coste_articulo_hist from function_object
end type

forward prototypes
global function decimal ftc_calculo_coste_articulo_hist (string empresa, string articulo, integer con_mermas, datetime fecha, ref decimal arg_coste_fab, ref decimal arg_coste_mp, ref decimal arg_coste_packing, ref decimal arg_coste_compras)
end prototypes

global function decimal ftc_calculo_coste_articulo_hist (string empresa, string articulo, integer con_mermas, datetime fecha, ref decimal arg_coste_fab, ref decimal arg_coste_mp, ref decimal arg_coste_packing, ref decimal arg_coste_compras);// ATENCIÓN: POR EL MOMENTO, LA FUNCIÓN DE VUELVE EL COSTE SIN TENER EN CUENTA EL COSTE DE PACKING

str_escandallo escandallo[300]
datastore ds_operaciones
integer indice, k, nivel
string  sel,  v_Articulo
long i
//decimal{6} v_coste_fabricacion, v_coste_mp
decimal{6} v_coste_fab_mermas, v_coste_mp_mermas, factor
Decimal {6}coste_mp, coste_fab, coste  , coste_compras, coste_packing

nivel = 0
indice = 1
factor = 1

arg_coste_mp = 0
arg_coste_fab = 0
arg_coste_packing = 0
arg_coste_compras = 0
coste_compras = 0
coste_packing = 0

f_escandallo_factores(escandallo, articulo, indice, factor, nivel)

for k = 1 to indice

	sel = " select articulo, coste_fab, coste_mp, "+&
			" coste_fab_mermas, coste_mp_mermas, coste_packing, coste_compras "+&
			" from articulos_coste "+&
			" where articulos_coste.empresa = '"+codigo_empresa+"' "+&
			" and articulos_coste.articulo = '"+Escandallo[k].articulo+"' "+&
			" and articulos_coste.fecha in (select max (B.fecha) from articulos_coste B where B.fecha <= '"+string(fecha, "dd-mm-yyyy")+"') "
		
	f_cargar_cursor_nuevo(sel, ds_operaciones)
	for i = 1 to ds_operaciones.rowcount()
		v_coste_fab_mermas  =  0
		v_coste_mp_mermas  =  0
	
		v_articulo = ds_operaciones.object.articulo[i]
		arg_coste_mp = ds_operaciones.object.coste_mp[i]
		arg_coste_fab  =  ds_operaciones.object.coste_fab[i]
		arg_coste_compras  =  ds_operaciones.object.coste_compras[i]
		arg_coste_packing  =  ds_operaciones.object.coste_packing[i]
		v_coste_fab_mermas  =  ds_operaciones.object.coste_fab_mermas[i]
		v_coste_mp_mermas  =  ds_operaciones.object.coste_mp_mermas[i]

		if isnull(arg_coste_mp) then arg_coste_mp = 0
		if isnull(arg_coste_fab)  then arg_coste_fab = 0		
		if isnull(v_coste_fab_mermas ) or con_mermas = 0 then v_coste_fab_mermas = 0
		if isnull(v_coste_mp_mermas ) or con_mermas = 0 then v_coste_mp_mermas = 0
		if isnull(arg_coste_packing) then arg_coste_packing = 0
		if isnull(arg_coste_compras) then arg_coste_compras = 0
		// Las mermas no las dividiremos por el factor, ya que el cálculo del coste se hace para la pieza equivalente a la final.
		coste_mp += arg_coste_mp / Escandallo[k].factor + v_coste_mp_mermas // / Escandallo[k].factor 
		coste_fab += arg_coste_fab / Escandallo[k].factor + v_coste_fab_mermas // / Escandallo[k].factor
		coste_compras += arg_coste_compras
		coste_packing += arg_coste_packing
	next
	destroy ds_operaciones
next
//coste = coste_mp + coste_fab + arg_coste_compras + arg_coste_packing
arg_coste_mp = coste_mp
arg_coste_fab = coste_fab

arg_coste_compras = coste_compras
arg_coste_packing = coste_packing
coste = coste_mp + coste_fab + coste_compras + coste_packing
return coste

end function

